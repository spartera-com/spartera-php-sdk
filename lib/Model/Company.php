<?php
/**
 * Company
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Spartera API Documentation
 *
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SparteraApiSdk\Model;

use \ArrayAccess;
use \SparteraApiSdk\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @description All of our customer company entities
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Company implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_id' => 'string',
        'industry_id' => 'string',
        'country_id' => 'string',
        'company_name' => 'string',
        'company_description' => 'string',
        'company_handle' => 'string',
        'company_domain' => 'string',
        'credits_balance' => 'string',
        'accepted_eula' => 'string',
        'stripe_account_id' => 'string',
        'stripe_account_status' => 'string',
        'date_created' => 'string',
        'last_updated' => 'string',
        'active' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company_id' => null,
        'industry_id' => null,
        'country_id' => null,
        'company_name' => null,
        'company_description' => null,
        'company_handle' => null,
        'company_domain' => null,
        'credits_balance' => null,
        'accepted_eula' => null,
        'stripe_account_id' => null,
        'stripe_account_status' => null,
        'date_created' => null,
        'last_updated' => null,
        'active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'company_id' => false,
        'industry_id' => false,
        'country_id' => false,
        'company_name' => false,
        'company_description' => false,
        'company_handle' => false,
        'company_domain' => false,
        'credits_balance' => false,
        'accepted_eula' => false,
        'stripe_account_id' => false,
        'stripe_account_status' => false,
        'date_created' => false,
        'last_updated' => false,
        'active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id' => 'company_id',
        'industry_id' => 'industry_id',
        'country_id' => 'country_id',
        'company_name' => 'company_name',
        'company_description' => 'company_description',
        'company_handle' => 'company_handle',
        'company_domain' => 'company_domain',
        'credits_balance' => 'credits_balance',
        'accepted_eula' => 'accepted_eula',
        'stripe_account_id' => 'stripe_account_id',
        'stripe_account_status' => 'stripe_account_status',
        'date_created' => 'date_created',
        'last_updated' => 'last_updated',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_id' => 'setCompanyId',
        'industry_id' => 'setIndustryId',
        'country_id' => 'setCountryId',
        'company_name' => 'setCompanyName',
        'company_description' => 'setCompanyDescription',
        'company_handle' => 'setCompanyHandle',
        'company_domain' => 'setCompanyDomain',
        'credits_balance' => 'setCreditsBalance',
        'accepted_eula' => 'setAcceptedEula',
        'stripe_account_id' => 'setStripeAccountId',
        'stripe_account_status' => 'setStripeAccountStatus',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_id' => 'getCompanyId',
        'industry_id' => 'getIndustryId',
        'country_id' => 'getCountryId',
        'company_name' => 'getCompanyName',
        'company_description' => 'getCompanyDescription',
        'company_handle' => 'getCompanyHandle',
        'company_domain' => 'getCompanyDomain',
        'credits_balance' => 'getCreditsBalance',
        'accepted_eula' => 'getAcceptedEula',
        'stripe_account_id' => 'getStripeAccountId',
        'stripe_account_status' => 'getStripeAccountStatus',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('industry_id', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('company_description', $data ?? [], null);
        $this->setIfExists('company_handle', $data ?? [], null);
        $this->setIfExists('company_domain', $data ?? [], null);
        $this->setIfExists('credits_balance', $data ?? [], null);
        $this->setIfExists('accepted_eula', $data ?? [], null);
        $this->setIfExists('stripe_account_id', $data ?? [], null);
        $this->setIfExists('stripe_account_status', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_handle'] === null) {
            $invalidProperties[] = "'company_handle' can't be null";
        }
        if ($this->container['company_domain'] === null) {
            $invalidProperties[] = "'company_domain' can't be null";
        }
        if ($this->container['credits_balance'] === null) {
            $invalidProperties[] = "'credits_balance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            throw new \InvalidArgumentException('non-nullable company_id cannot be null');
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets industry_id
     *
     * @return string|null
     */
    public function getIndustryId()
    {
        return $this->container['industry_id'];
    }

    /**
     * Sets industry_id
     *
     * @param string|null $industry_id industry_id
     *
     * @return self
     */
    public function setIndustryId($industry_id)
    {
        if (is_null($industry_id)) {
            throw new \InvalidArgumentException('non-nullable industry_id cannot be null');
        }
        $this->container['industry_id'] = $industry_id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            throw new \InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_description
     *
     * @return string|null
     */
    public function getCompanyDescription()
    {
        return $this->container['company_description'];
    }

    /**
     * Sets company_description
     *
     * @param string|null $company_description company_description
     *
     * @return self
     */
    public function setCompanyDescription($company_description)
    {
        if (is_null($company_description)) {
            throw new \InvalidArgumentException('non-nullable company_description cannot be null');
        }
        $this->container['company_description'] = $company_description;

        return $this;
    }

    /**
     * Gets company_handle
     *
     * @return string
     */
    public function getCompanyHandle()
    {
        return $this->container['company_handle'];
    }

    /**
     * Sets company_handle
     *
     * @param string $company_handle company_handle
     *
     * @return self
     */
    public function setCompanyHandle($company_handle)
    {
        if (is_null($company_handle)) {
            throw new \InvalidArgumentException('non-nullable company_handle cannot be null');
        }
        $this->container['company_handle'] = $company_handle;

        return $this;
    }

    /**
     * Gets company_domain
     *
     * @return string
     */
    public function getCompanyDomain()
    {
        return $this->container['company_domain'];
    }

    /**
     * Sets company_domain
     *
     * @param string $company_domain company_domain
     *
     * @return self
     */
    public function setCompanyDomain($company_domain)
    {
        if (is_null($company_domain)) {
            throw new \InvalidArgumentException('non-nullable company_domain cannot be null');
        }
        $this->container['company_domain'] = $company_domain;

        return $this;
    }

    /**
     * Gets credits_balance
     *
     * @return string
     */
    public function getCreditsBalance()
    {
        return $this->container['credits_balance'];
    }

    /**
     * Sets credits_balance
     *
     * @param string $credits_balance credits_balance
     *
     * @return self
     */
    public function setCreditsBalance($credits_balance)
    {
        if (is_null($credits_balance)) {
            throw new \InvalidArgumentException('non-nullable credits_balance cannot be null');
        }
        $this->container['credits_balance'] = $credits_balance;

        return $this;
    }

    /**
     * Gets accepted_eula
     *
     * @return string|null
     */
    public function getAcceptedEula()
    {
        return $this->container['accepted_eula'];
    }

    /**
     * Sets accepted_eula
     *
     * @param string|null $accepted_eula accepted_eula
     *
     * @return self
     */
    public function setAcceptedEula($accepted_eula)
    {
        if (is_null($accepted_eula)) {
            throw new \InvalidArgumentException('non-nullable accepted_eula cannot be null');
        }
        $this->container['accepted_eula'] = $accepted_eula;

        return $this;
    }

    /**
     * Gets stripe_account_id
     *
     * @return string|null
     */
    public function getStripeAccountId()
    {
        return $this->container['stripe_account_id'];
    }

    /**
     * Sets stripe_account_id
     *
     * @param string|null $stripe_account_id stripe_account_id
     *
     * @return self
     */
    public function setStripeAccountId($stripe_account_id)
    {
        if (is_null($stripe_account_id)) {
            throw new \InvalidArgumentException('non-nullable stripe_account_id cannot be null');
        }
        $this->container['stripe_account_id'] = $stripe_account_id;

        return $this;
    }

    /**
     * Gets stripe_account_status
     *
     * @return string|null
     */
    public function getStripeAccountStatus()
    {
        return $this->container['stripe_account_status'];
    }

    /**
     * Sets stripe_account_status
     *
     * @param string|null $stripe_account_status stripe_account_status
     *
     * @return self
     */
    public function setStripeAccountStatus($stripe_account_status)
    {
        if (is_null($stripe_account_status)) {
            throw new \InvalidArgumentException('non-nullable stripe_account_status cannot be null');
        }
        $this->container['stripe_account_status'] = $stripe_account_status;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


