<?php
/**
 * Connection
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Spartera API Documentation
 *
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SparteraApiSdk\Model;

use \ArrayAccess;
use \SparteraApiSdk\ObjectSerializer;

/**
 * Connection Class Doc Comment
 *
 * @category Class
 * @description Model for every connection setup from our platform
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Connection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Connection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connection_id' => 'string',
        'user_id' => 'string',
        'engine_id' => 'string',
        'company_id' => 'string',
        'credential_type' => 'string',
        'api_provider' => 'string',
        'api_endpoint' => 'string',
        'api_key_location' => 'string',
        'api_key_param' => 'string',
        'api_key_value' => 'string',
        'visibility' => 'string',
        'name' => 'string',
        'description' => 'string',
        'gcp_secret_id' => 'string',
        'provider_domain' => 'string',
        'verified_usage_ability' => 'string',
        'date_created' => 'string',
        'last_updated' => 'string',
        'active' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connection_id' => null,
        'user_id' => null,
        'engine_id' => null,
        'company_id' => null,
        'credential_type' => null,
        'api_provider' => null,
        'api_endpoint' => null,
        'api_key_location' => null,
        'api_key_param' => null,
        'api_key_value' => null,
        'visibility' => null,
        'name' => null,
        'description' => null,
        'gcp_secret_id' => null,
        'provider_domain' => null,
        'verified_usage_ability' => null,
        'date_created' => null,
        'last_updated' => null,
        'active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'connection_id' => false,
        'user_id' => false,
        'engine_id' => false,
        'company_id' => false,
        'credential_type' => false,
        'api_provider' => false,
        'api_endpoint' => false,
        'api_key_location' => false,
        'api_key_param' => false,
        'api_key_value' => false,
        'visibility' => false,
        'name' => false,
        'description' => false,
        'gcp_secret_id' => false,
        'provider_domain' => false,
        'verified_usage_ability' => false,
        'date_created' => false,
        'last_updated' => false,
        'active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_id' => 'connection_id',
        'user_id' => 'user_id',
        'engine_id' => 'engine_id',
        'company_id' => 'company_id',
        'credential_type' => 'credential_type',
        'api_provider' => 'api_provider',
        'api_endpoint' => 'api_endpoint',
        'api_key_location' => 'api_key_location',
        'api_key_param' => 'api_key_param',
        'api_key_value' => 'api_key_value',
        'visibility' => 'visibility',
        'name' => 'name',
        'description' => 'description',
        'gcp_secret_id' => 'gcp_secret_id',
        'provider_domain' => 'provider_domain',
        'verified_usage_ability' => 'verified_usage_ability',
        'date_created' => 'date_created',
        'last_updated' => 'last_updated',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_id' => 'setConnectionId',
        'user_id' => 'setUserId',
        'engine_id' => 'setEngineId',
        'company_id' => 'setCompanyId',
        'credential_type' => 'setCredentialType',
        'api_provider' => 'setApiProvider',
        'api_endpoint' => 'setApiEndpoint',
        'api_key_location' => 'setApiKeyLocation',
        'api_key_param' => 'setApiKeyParam',
        'api_key_value' => 'setApiKeyValue',
        'visibility' => 'setVisibility',
        'name' => 'setName',
        'description' => 'setDescription',
        'gcp_secret_id' => 'setGcpSecretId',
        'provider_domain' => 'setProviderDomain',
        'verified_usage_ability' => 'setVerifiedUsageAbility',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_id' => 'getConnectionId',
        'user_id' => 'getUserId',
        'engine_id' => 'getEngineId',
        'company_id' => 'getCompanyId',
        'credential_type' => 'getCredentialType',
        'api_provider' => 'getApiProvider',
        'api_endpoint' => 'getApiEndpoint',
        'api_key_location' => 'getApiKeyLocation',
        'api_key_param' => 'getApiKeyParam',
        'api_key_value' => 'getApiKeyValue',
        'visibility' => 'getVisibility',
        'name' => 'getName',
        'description' => 'getDescription',
        'gcp_secret_id' => 'getGcpSecretId',
        'provider_domain' => 'getProviderDomain',
        'verified_usage_ability' => 'getVerifiedUsageAbility',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('connection_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('engine_id', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('credential_type', $data ?? [], null);
        $this->setIfExists('api_provider', $data ?? [], null);
        $this->setIfExists('api_endpoint', $data ?? [], null);
        $this->setIfExists('api_key_location', $data ?? [], null);
        $this->setIfExists('api_key_param', $data ?? [], null);
        $this->setIfExists('api_key_value', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('gcp_secret_id', $data ?? [], null);
        $this->setIfExists('provider_domain', $data ?? [], null);
        $this->setIfExists('verified_usage_ability', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['engine_id'] === null) {
            $invalidProperties[] = "'engine_id' can't be null";
        }
        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection_id
     *
     * @return string|null
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string|null $connection_id connection_id
     *
     * @return self
     */
    public function setConnectionId($connection_id)
    {
        if (is_null($connection_id)) {
            throw new \InvalidArgumentException('non-nullable connection_id cannot be null');
        }
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets engine_id
     *
     * @return string
     */
    public function getEngineId()
    {
        return $this->container['engine_id'];
    }

    /**
     * Sets engine_id
     *
     * @param string $engine_id engine_id
     *
     * @return self
     */
    public function setEngineId($engine_id)
    {
        if (is_null($engine_id)) {
            throw new \InvalidArgumentException('non-nullable engine_id cannot be null');
        }
        $this->container['engine_id'] = $engine_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            throw new \InvalidArgumentException('non-nullable company_id cannot be null');
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets credential_type
     *
     * @return string|null
     */
    public function getCredentialType()
    {
        return $this->container['credential_type'];
    }

    /**
     * Sets credential_type
     *
     * @param string|null $credential_type credential_type
     *
     * @return self
     */
    public function setCredentialType($credential_type)
    {
        if (is_null($credential_type)) {
            throw new \InvalidArgumentException('non-nullable credential_type cannot be null');
        }
        $this->container['credential_type'] = $credential_type;

        return $this;
    }

    /**
     * Gets api_provider
     *
     * @return string|null
     */
    public function getApiProvider()
    {
        return $this->container['api_provider'];
    }

    /**
     * Sets api_provider
     *
     * @param string|null $api_provider api_provider
     *
     * @return self
     */
    public function setApiProvider($api_provider)
    {
        if (is_null($api_provider)) {
            throw new \InvalidArgumentException('non-nullable api_provider cannot be null');
        }
        $this->container['api_provider'] = $api_provider;

        return $this;
    }

    /**
     * Gets api_endpoint
     *
     * @return string|null
     */
    public function getApiEndpoint()
    {
        return $this->container['api_endpoint'];
    }

    /**
     * Sets api_endpoint
     *
     * @param string|null $api_endpoint api_endpoint
     *
     * @return self
     */
    public function setApiEndpoint($api_endpoint)
    {
        if (is_null($api_endpoint)) {
            throw new \InvalidArgumentException('non-nullable api_endpoint cannot be null');
        }
        $this->container['api_endpoint'] = $api_endpoint;

        return $this;
    }

    /**
     * Gets api_key_location
     *
     * @return string|null
     */
    public function getApiKeyLocation()
    {
        return $this->container['api_key_location'];
    }

    /**
     * Sets api_key_location
     *
     * @param string|null $api_key_location api_key_location
     *
     * @return self
     */
    public function setApiKeyLocation($api_key_location)
    {
        if (is_null($api_key_location)) {
            throw new \InvalidArgumentException('non-nullable api_key_location cannot be null');
        }
        $this->container['api_key_location'] = $api_key_location;

        return $this;
    }

    /**
     * Gets api_key_param
     *
     * @return string|null
     */
    public function getApiKeyParam()
    {
        return $this->container['api_key_param'];
    }

    /**
     * Sets api_key_param
     *
     * @param string|null $api_key_param api_key_param
     *
     * @return self
     */
    public function setApiKeyParam($api_key_param)
    {
        if (is_null($api_key_param)) {
            throw new \InvalidArgumentException('non-nullable api_key_param cannot be null');
        }
        $this->container['api_key_param'] = $api_key_param;

        return $this;
    }

    /**
     * Gets api_key_value
     *
     * @return string|null
     */
    public function getApiKeyValue()
    {
        return $this->container['api_key_value'];
    }

    /**
     * Sets api_key_value
     *
     * @param string|null $api_key_value api_key_value
     *
     * @return self
     */
    public function setApiKeyValue($api_key_value)
    {
        if (is_null($api_key_value)) {
            throw new \InvalidArgumentException('non-nullable api_key_value cannot be null');
        }
        $this->container['api_key_value'] = $api_key_value;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gcp_secret_id
     *
     * @return string|null
     */
    public function getGcpSecretId()
    {
        return $this->container['gcp_secret_id'];
    }

    /**
     * Sets gcp_secret_id
     *
     * @param string|null $gcp_secret_id gcp_secret_id
     *
     * @return self
     */
    public function setGcpSecretId($gcp_secret_id)
    {
        if (is_null($gcp_secret_id)) {
            throw new \InvalidArgumentException('non-nullable gcp_secret_id cannot be null');
        }
        $this->container['gcp_secret_id'] = $gcp_secret_id;

        return $this;
    }

    /**
     * Gets provider_domain
     *
     * @return string|null
     */
    public function getProviderDomain()
    {
        return $this->container['provider_domain'];
    }

    /**
     * Sets provider_domain
     *
     * @param string|null $provider_domain provider_domain
     *
     * @return self
     */
    public function setProviderDomain($provider_domain)
    {
        if (is_null($provider_domain)) {
            throw new \InvalidArgumentException('non-nullable provider_domain cannot be null');
        }
        $this->container['provider_domain'] = $provider_domain;

        return $this;
    }

    /**
     * Gets verified_usage_ability
     *
     * @return string|null
     */
    public function getVerifiedUsageAbility()
    {
        return $this->container['verified_usage_ability'];
    }

    /**
     * Sets verified_usage_ability
     *
     * @param string|null $verified_usage_ability verified_usage_ability
     *
     * @return self
     */
    public function setVerifiedUsageAbility($verified_usage_ability)
    {
        if (is_null($verified_usage_ability)) {
            throw new \InvalidArgumentException('non-nullable verified_usage_ability cannot be null');
        }
        $this->container['verified_usage_ability'] = $verified_usage_ability;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


