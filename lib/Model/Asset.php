<?php
/**
 * Asset
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Spartera API Documentation
 *
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SparteraApiSdk\Model;

use \ArrayAccess;
use \SparteraApiSdk\ObjectSerializer;

/**
 * Asset Class Doc Comment
 *
 * @category Class
 * @description Asset model for every asset (insight/visualization/feed/etc.) customer creates
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Asset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Asset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset_id' => 'string',
        'user_id' => 'string',
        'company_id' => 'string',
        'connection_id' => 'string',
        'llm_connection_id' => 'string',
        'snippet_id' => 'string',
        'industry_id' => 'string',
        'ai_job_id' => 'string',
        'approval_status' => 'string',
        'approved_by_user_id' => 'string',
        'approved_at' => 'string',
        'name' => 'string',
        'slug' => 'string',
        'description' => 'string',
        'source' => 'string',
        'asset_type' => 'string',
        'asset_schema' => 'string',
        'visibility' => 'string',
        'tags' => 'string',
        'sql_logic' => 'string',
        'source_schema_name' => 'string',
        'source_table_name' => 'string',
        'sell_in_marketplace' => 'string',
        'viz_chart_library' => 'string',
        'viz_chart_type' => 'string',
        'viz_dep_var_col_name' => 'string',
        'viz_indep_var_col_name' => 'string',
        'viz_size_col_name' => 'string',
        'viz_color_col_name' => 'string',
        'viz_data_aggregation' => 'string',
        'viz_sort_direction' => 'string',
        'viz_data_limit' => 'string',
        'viz_color_scheme' => 'string',
        'allow_params' => 'string',
        'accept_terms' => 'string',
        'cached' => 'string',
        'schedule' => 'string',
        'next_run' => 'string',
        'data_time_period_start' => 'string',
        'data_time_period_end' => 'string',
        'geographic_coverage_type' => 'string',
        'geographic_coverage_details' => 'string',
        'data_source_refresh_frequency' => 'string',
        'data_source_last_refreshed' => 'string',
        'date_created' => 'string',
        'last_updated' => 'string',
        'active' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'asset_id' => null,
        'user_id' => null,
        'company_id' => null,
        'connection_id' => null,
        'llm_connection_id' => null,
        'snippet_id' => null,
        'industry_id' => null,
        'ai_job_id' => null,
        'approval_status' => null,
        'approved_by_user_id' => null,
        'approved_at' => null,
        'name' => null,
        'slug' => null,
        'description' => null,
        'source' => null,
        'asset_type' => null,
        'asset_schema' => null,
        'visibility' => null,
        'tags' => null,
        'sql_logic' => null,
        'source_schema_name' => null,
        'source_table_name' => null,
        'sell_in_marketplace' => null,
        'viz_chart_library' => null,
        'viz_chart_type' => null,
        'viz_dep_var_col_name' => null,
        'viz_indep_var_col_name' => null,
        'viz_size_col_name' => null,
        'viz_color_col_name' => null,
        'viz_data_aggregation' => null,
        'viz_sort_direction' => null,
        'viz_data_limit' => null,
        'viz_color_scheme' => null,
        'allow_params' => null,
        'accept_terms' => null,
        'cached' => null,
        'schedule' => null,
        'next_run' => null,
        'data_time_period_start' => null,
        'data_time_period_end' => null,
        'geographic_coverage_type' => null,
        'geographic_coverage_details' => null,
        'data_source_refresh_frequency' => null,
        'data_source_last_refreshed' => null,
        'date_created' => null,
        'last_updated' => null,
        'active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'asset_id' => false,
        'user_id' => false,
        'company_id' => false,
        'connection_id' => false,
        'llm_connection_id' => false,
        'snippet_id' => false,
        'industry_id' => false,
        'ai_job_id' => false,
        'approval_status' => false,
        'approved_by_user_id' => false,
        'approved_at' => false,
        'name' => false,
        'slug' => false,
        'description' => false,
        'source' => false,
        'asset_type' => false,
        'asset_schema' => false,
        'visibility' => false,
        'tags' => false,
        'sql_logic' => false,
        'source_schema_name' => false,
        'source_table_name' => false,
        'sell_in_marketplace' => false,
        'viz_chart_library' => false,
        'viz_chart_type' => false,
        'viz_dep_var_col_name' => false,
        'viz_indep_var_col_name' => false,
        'viz_size_col_name' => false,
        'viz_color_col_name' => false,
        'viz_data_aggregation' => false,
        'viz_sort_direction' => false,
        'viz_data_limit' => false,
        'viz_color_scheme' => false,
        'allow_params' => false,
        'accept_terms' => false,
        'cached' => false,
        'schedule' => false,
        'next_run' => false,
        'data_time_period_start' => false,
        'data_time_period_end' => false,
        'geographic_coverage_type' => false,
        'geographic_coverage_details' => false,
        'data_source_refresh_frequency' => false,
        'data_source_last_refreshed' => false,
        'date_created' => false,
        'last_updated' => false,
        'active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_id' => 'asset_id',
        'user_id' => 'user_id',
        'company_id' => 'company_id',
        'connection_id' => 'connection_id',
        'llm_connection_id' => 'llm_connection_id',
        'snippet_id' => 'snippet_id',
        'industry_id' => 'industry_id',
        'ai_job_id' => 'ai_job_id',
        'approval_status' => 'approval_status',
        'approved_by_user_id' => 'approved_by_user_id',
        'approved_at' => 'approved_at',
        'name' => 'name',
        'slug' => 'slug',
        'description' => 'description',
        'source' => 'source',
        'asset_type' => 'asset_type',
        'asset_schema' => 'asset_schema',
        'visibility' => 'visibility',
        'tags' => 'tags',
        'sql_logic' => 'sql_logic',
        'source_schema_name' => 'source_schema_name',
        'source_table_name' => 'source_table_name',
        'sell_in_marketplace' => 'sell_in_marketplace',
        'viz_chart_library' => 'viz_chart_library',
        'viz_chart_type' => 'viz_chart_type',
        'viz_dep_var_col_name' => 'viz_dep_var_col_name',
        'viz_indep_var_col_name' => 'viz_indep_var_col_name',
        'viz_size_col_name' => 'viz_size_col_name',
        'viz_color_col_name' => 'viz_color_col_name',
        'viz_data_aggregation' => 'viz_data_aggregation',
        'viz_sort_direction' => 'viz_sort_direction',
        'viz_data_limit' => 'viz_data_limit',
        'viz_color_scheme' => 'viz_color_scheme',
        'allow_params' => 'allow_params',
        'accept_terms' => 'accept_terms',
        'cached' => 'cached',
        'schedule' => 'schedule',
        'next_run' => 'next_run',
        'data_time_period_start' => 'data_time_period_start',
        'data_time_period_end' => 'data_time_period_end',
        'geographic_coverage_type' => 'geographic_coverage_type',
        'geographic_coverage_details' => 'geographic_coverage_details',
        'data_source_refresh_frequency' => 'data_source_refresh_frequency',
        'data_source_last_refreshed' => 'data_source_last_refreshed',
        'date_created' => 'date_created',
        'last_updated' => 'last_updated',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_id' => 'setAssetId',
        'user_id' => 'setUserId',
        'company_id' => 'setCompanyId',
        'connection_id' => 'setConnectionId',
        'llm_connection_id' => 'setLlmConnectionId',
        'snippet_id' => 'setSnippetId',
        'industry_id' => 'setIndustryId',
        'ai_job_id' => 'setAiJobId',
        'approval_status' => 'setApprovalStatus',
        'approved_by_user_id' => 'setApprovedByUserId',
        'approved_at' => 'setApprovedAt',
        'name' => 'setName',
        'slug' => 'setSlug',
        'description' => 'setDescription',
        'source' => 'setSource',
        'asset_type' => 'setAssetType',
        'asset_schema' => 'setAssetSchema',
        'visibility' => 'setVisibility',
        'tags' => 'setTags',
        'sql_logic' => 'setSqlLogic',
        'source_schema_name' => 'setSourceSchemaName',
        'source_table_name' => 'setSourceTableName',
        'sell_in_marketplace' => 'setSellInMarketplace',
        'viz_chart_library' => 'setVizChartLibrary',
        'viz_chart_type' => 'setVizChartType',
        'viz_dep_var_col_name' => 'setVizDepVarColName',
        'viz_indep_var_col_name' => 'setVizIndepVarColName',
        'viz_size_col_name' => 'setVizSizeColName',
        'viz_color_col_name' => 'setVizColorColName',
        'viz_data_aggregation' => 'setVizDataAggregation',
        'viz_sort_direction' => 'setVizSortDirection',
        'viz_data_limit' => 'setVizDataLimit',
        'viz_color_scheme' => 'setVizColorScheme',
        'allow_params' => 'setAllowParams',
        'accept_terms' => 'setAcceptTerms',
        'cached' => 'setCached',
        'schedule' => 'setSchedule',
        'next_run' => 'setNextRun',
        'data_time_period_start' => 'setDataTimePeriodStart',
        'data_time_period_end' => 'setDataTimePeriodEnd',
        'geographic_coverage_type' => 'setGeographicCoverageType',
        'geographic_coverage_details' => 'setGeographicCoverageDetails',
        'data_source_refresh_frequency' => 'setDataSourceRefreshFrequency',
        'data_source_last_refreshed' => 'setDataSourceLastRefreshed',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_id' => 'getAssetId',
        'user_id' => 'getUserId',
        'company_id' => 'getCompanyId',
        'connection_id' => 'getConnectionId',
        'llm_connection_id' => 'getLlmConnectionId',
        'snippet_id' => 'getSnippetId',
        'industry_id' => 'getIndustryId',
        'ai_job_id' => 'getAiJobId',
        'approval_status' => 'getApprovalStatus',
        'approved_by_user_id' => 'getApprovedByUserId',
        'approved_at' => 'getApprovedAt',
        'name' => 'getName',
        'slug' => 'getSlug',
        'description' => 'getDescription',
        'source' => 'getSource',
        'asset_type' => 'getAssetType',
        'asset_schema' => 'getAssetSchema',
        'visibility' => 'getVisibility',
        'tags' => 'getTags',
        'sql_logic' => 'getSqlLogic',
        'source_schema_name' => 'getSourceSchemaName',
        'source_table_name' => 'getSourceTableName',
        'sell_in_marketplace' => 'getSellInMarketplace',
        'viz_chart_library' => 'getVizChartLibrary',
        'viz_chart_type' => 'getVizChartType',
        'viz_dep_var_col_name' => 'getVizDepVarColName',
        'viz_indep_var_col_name' => 'getVizIndepVarColName',
        'viz_size_col_name' => 'getVizSizeColName',
        'viz_color_col_name' => 'getVizColorColName',
        'viz_data_aggregation' => 'getVizDataAggregation',
        'viz_sort_direction' => 'getVizSortDirection',
        'viz_data_limit' => 'getVizDataLimit',
        'viz_color_scheme' => 'getVizColorScheme',
        'allow_params' => 'getAllowParams',
        'accept_terms' => 'getAcceptTerms',
        'cached' => 'getCached',
        'schedule' => 'getSchedule',
        'next_run' => 'getNextRun',
        'data_time_period_start' => 'getDataTimePeriodStart',
        'data_time_period_end' => 'getDataTimePeriodEnd',
        'geographic_coverage_type' => 'getGeographicCoverageType',
        'geographic_coverage_details' => 'getGeographicCoverageDetails',
        'data_source_refresh_frequency' => 'getDataSourceRefreshFrequency',
        'data_source_last_refreshed' => 'getDataSourceLastRefreshed',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('connection_id', $data ?? [], null);
        $this->setIfExists('llm_connection_id', $data ?? [], null);
        $this->setIfExists('snippet_id', $data ?? [], null);
        $this->setIfExists('industry_id', $data ?? [], null);
        $this->setIfExists('ai_job_id', $data ?? [], null);
        $this->setIfExists('approval_status', $data ?? [], null);
        $this->setIfExists('approved_by_user_id', $data ?? [], null);
        $this->setIfExists('approved_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('asset_type', $data ?? [], null);
        $this->setIfExists('asset_schema', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('sql_logic', $data ?? [], null);
        $this->setIfExists('source_schema_name', $data ?? [], null);
        $this->setIfExists('source_table_name', $data ?? [], null);
        $this->setIfExists('sell_in_marketplace', $data ?? [], null);
        $this->setIfExists('viz_chart_library', $data ?? [], null);
        $this->setIfExists('viz_chart_type', $data ?? [], null);
        $this->setIfExists('viz_dep_var_col_name', $data ?? [], null);
        $this->setIfExists('viz_indep_var_col_name', $data ?? [], null);
        $this->setIfExists('viz_size_col_name', $data ?? [], null);
        $this->setIfExists('viz_color_col_name', $data ?? [], null);
        $this->setIfExists('viz_data_aggregation', $data ?? [], null);
        $this->setIfExists('viz_sort_direction', $data ?? [], null);
        $this->setIfExists('viz_data_limit', $data ?? [], null);
        $this->setIfExists('viz_color_scheme', $data ?? [], null);
        $this->setIfExists('allow_params', $data ?? [], null);
        $this->setIfExists('accept_terms', $data ?? [], null);
        $this->setIfExists('cached', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('next_run', $data ?? [], null);
        $this->setIfExists('data_time_period_start', $data ?? [], null);
        $this->setIfExists('data_time_period_end', $data ?? [], null);
        $this->setIfExists('geographic_coverage_type', $data ?? [], null);
        $this->setIfExists('geographic_coverage_details', $data ?? [], null);
        $this->setIfExists('data_source_refresh_frequency', $data ?? [], null);
        $this->setIfExists('data_source_last_refreshed', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_id
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string|null $asset_id asset_id
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            throw new \InvalidArgumentException('non-nullable company_id cannot be null');
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets connection_id
     *
     * @return string|null
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string|null $connection_id connection_id
     *
     * @return self
     */
    public function setConnectionId($connection_id)
    {
        if (is_null($connection_id)) {
            throw new \InvalidArgumentException('non-nullable connection_id cannot be null');
        }
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets llm_connection_id
     *
     * @return string|null
     */
    public function getLlmConnectionId()
    {
        return $this->container['llm_connection_id'];
    }

    /**
     * Sets llm_connection_id
     *
     * @param string|null $llm_connection_id llm_connection_id
     *
     * @return self
     */
    public function setLlmConnectionId($llm_connection_id)
    {
        if (is_null($llm_connection_id)) {
            throw new \InvalidArgumentException('non-nullable llm_connection_id cannot be null');
        }
        $this->container['llm_connection_id'] = $llm_connection_id;

        return $this;
    }

    /**
     * Gets snippet_id
     *
     * @return string|null
     */
    public function getSnippetId()
    {
        return $this->container['snippet_id'];
    }

    /**
     * Sets snippet_id
     *
     * @param string|null $snippet_id snippet_id
     *
     * @return self
     */
    public function setSnippetId($snippet_id)
    {
        if (is_null($snippet_id)) {
            throw new \InvalidArgumentException('non-nullable snippet_id cannot be null');
        }
        $this->container['snippet_id'] = $snippet_id;

        return $this;
    }

    /**
     * Gets industry_id
     *
     * @return string|null
     */
    public function getIndustryId()
    {
        return $this->container['industry_id'];
    }

    /**
     * Sets industry_id
     *
     * @param string|null $industry_id industry_id
     *
     * @return self
     */
    public function setIndustryId($industry_id)
    {
        if (is_null($industry_id)) {
            throw new \InvalidArgumentException('non-nullable industry_id cannot be null');
        }
        $this->container['industry_id'] = $industry_id;

        return $this;
    }

    /**
     * Gets ai_job_id
     *
     * @return string|null
     */
    public function getAiJobId()
    {
        return $this->container['ai_job_id'];
    }

    /**
     * Sets ai_job_id
     *
     * @param string|null $ai_job_id ai_job_id
     *
     * @return self
     */
    public function setAiJobId($ai_job_id)
    {
        if (is_null($ai_job_id)) {
            throw new \InvalidArgumentException('non-nullable ai_job_id cannot be null');
        }
        $this->container['ai_job_id'] = $ai_job_id;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string|null
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string|null $approval_status approval_status
     *
     * @return self
     */
    public function setApprovalStatus($approval_status)
    {
        if (is_null($approval_status)) {
            throw new \InvalidArgumentException('non-nullable approval_status cannot be null');
        }
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets approved_by_user_id
     *
     * @return string|null
     */
    public function getApprovedByUserId()
    {
        return $this->container['approved_by_user_id'];
    }

    /**
     * Sets approved_by_user_id
     *
     * @param string|null $approved_by_user_id approved_by_user_id
     *
     * @return self
     */
    public function setApprovedByUserId($approved_by_user_id)
    {
        if (is_null($approved_by_user_id)) {
            throw new \InvalidArgumentException('non-nullable approved_by_user_id cannot be null');
        }
        $this->container['approved_by_user_id'] = $approved_by_user_id;

        return $this;
    }

    /**
     * Gets approved_at
     *
     * @return string|null
     */
    public function getApprovedAt()
    {
        return $this->container['approved_at'];
    }

    /**
     * Sets approved_at
     *
     * @param string|null $approved_at approved_at
     *
     * @return self
     */
    public function setApprovedAt($approved_at)
    {
        if (is_null($approved_at)) {
            throw new \InvalidArgumentException('non-nullable approved_at cannot be null');
        }
        $this->container['approved_at'] = $approved_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return string|null
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string|null $asset_type asset_type
     *
     * @return self
     */
    public function setAssetType($asset_type)
    {
        if (is_null($asset_type)) {
            throw new \InvalidArgumentException('non-nullable asset_type cannot be null');
        }
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets asset_schema
     *
     * @return string|null
     */
    public function getAssetSchema()
    {
        return $this->container['asset_schema'];
    }

    /**
     * Sets asset_schema
     *
     * @param string|null $asset_schema asset_schema
     *
     * @return self
     */
    public function setAssetSchema($asset_schema)
    {
        if (is_null($asset_schema)) {
            throw new \InvalidArgumentException('non-nullable asset_schema cannot be null');
        }
        $this->container['asset_schema'] = $asset_schema;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets sql_logic
     *
     * @return string|null
     */
    public function getSqlLogic()
    {
        return $this->container['sql_logic'];
    }

    /**
     * Sets sql_logic
     *
     * @param string|null $sql_logic sql_logic
     *
     * @return self
     */
    public function setSqlLogic($sql_logic)
    {
        if (is_null($sql_logic)) {
            throw new \InvalidArgumentException('non-nullable sql_logic cannot be null');
        }
        $this->container['sql_logic'] = $sql_logic;

        return $this;
    }

    /**
     * Gets source_schema_name
     *
     * @return string|null
     */
    public function getSourceSchemaName()
    {
        return $this->container['source_schema_name'];
    }

    /**
     * Sets source_schema_name
     *
     * @param string|null $source_schema_name source_schema_name
     *
     * @return self
     */
    public function setSourceSchemaName($source_schema_name)
    {
        if (is_null($source_schema_name)) {
            throw new \InvalidArgumentException('non-nullable source_schema_name cannot be null');
        }
        $this->container['source_schema_name'] = $source_schema_name;

        return $this;
    }

    /**
     * Gets source_table_name
     *
     * @return string|null
     */
    public function getSourceTableName()
    {
        return $this->container['source_table_name'];
    }

    /**
     * Sets source_table_name
     *
     * @param string|null $source_table_name source_table_name
     *
     * @return self
     */
    public function setSourceTableName($source_table_name)
    {
        if (is_null($source_table_name)) {
            throw new \InvalidArgumentException('non-nullable source_table_name cannot be null');
        }
        $this->container['source_table_name'] = $source_table_name;

        return $this;
    }

    /**
     * Gets sell_in_marketplace
     *
     * @return string|null
     */
    public function getSellInMarketplace()
    {
        return $this->container['sell_in_marketplace'];
    }

    /**
     * Sets sell_in_marketplace
     *
     * @param string|null $sell_in_marketplace sell_in_marketplace
     *
     * @return self
     */
    public function setSellInMarketplace($sell_in_marketplace)
    {
        if (is_null($sell_in_marketplace)) {
            throw new \InvalidArgumentException('non-nullable sell_in_marketplace cannot be null');
        }
        $this->container['sell_in_marketplace'] = $sell_in_marketplace;

        return $this;
    }

    /**
     * Gets viz_chart_library
     *
     * @return string|null
     */
    public function getVizChartLibrary()
    {
        return $this->container['viz_chart_library'];
    }

    /**
     * Sets viz_chart_library
     *
     * @param string|null $viz_chart_library viz_chart_library
     *
     * @return self
     */
    public function setVizChartLibrary($viz_chart_library)
    {
        if (is_null($viz_chart_library)) {
            throw new \InvalidArgumentException('non-nullable viz_chart_library cannot be null');
        }
        $this->container['viz_chart_library'] = $viz_chart_library;

        return $this;
    }

    /**
     * Gets viz_chart_type
     *
     * @return string|null
     */
    public function getVizChartType()
    {
        return $this->container['viz_chart_type'];
    }

    /**
     * Sets viz_chart_type
     *
     * @param string|null $viz_chart_type viz_chart_type
     *
     * @return self
     */
    public function setVizChartType($viz_chart_type)
    {
        if (is_null($viz_chart_type)) {
            throw new \InvalidArgumentException('non-nullable viz_chart_type cannot be null');
        }
        $this->container['viz_chart_type'] = $viz_chart_type;

        return $this;
    }

    /**
     * Gets viz_dep_var_col_name
     *
     * @return string|null
     */
    public function getVizDepVarColName()
    {
        return $this->container['viz_dep_var_col_name'];
    }

    /**
     * Sets viz_dep_var_col_name
     *
     * @param string|null $viz_dep_var_col_name viz_dep_var_col_name
     *
     * @return self
     */
    public function setVizDepVarColName($viz_dep_var_col_name)
    {
        if (is_null($viz_dep_var_col_name)) {
            throw new \InvalidArgumentException('non-nullable viz_dep_var_col_name cannot be null');
        }
        $this->container['viz_dep_var_col_name'] = $viz_dep_var_col_name;

        return $this;
    }

    /**
     * Gets viz_indep_var_col_name
     *
     * @return string|null
     */
    public function getVizIndepVarColName()
    {
        return $this->container['viz_indep_var_col_name'];
    }

    /**
     * Sets viz_indep_var_col_name
     *
     * @param string|null $viz_indep_var_col_name viz_indep_var_col_name
     *
     * @return self
     */
    public function setVizIndepVarColName($viz_indep_var_col_name)
    {
        if (is_null($viz_indep_var_col_name)) {
            throw new \InvalidArgumentException('non-nullable viz_indep_var_col_name cannot be null');
        }
        $this->container['viz_indep_var_col_name'] = $viz_indep_var_col_name;

        return $this;
    }

    /**
     * Gets viz_size_col_name
     *
     * @return string|null
     */
    public function getVizSizeColName()
    {
        return $this->container['viz_size_col_name'];
    }

    /**
     * Sets viz_size_col_name
     *
     * @param string|null $viz_size_col_name viz_size_col_name
     *
     * @return self
     */
    public function setVizSizeColName($viz_size_col_name)
    {
        if (is_null($viz_size_col_name)) {
            throw new \InvalidArgumentException('non-nullable viz_size_col_name cannot be null');
        }
        $this->container['viz_size_col_name'] = $viz_size_col_name;

        return $this;
    }

    /**
     * Gets viz_color_col_name
     *
     * @return string|null
     */
    public function getVizColorColName()
    {
        return $this->container['viz_color_col_name'];
    }

    /**
     * Sets viz_color_col_name
     *
     * @param string|null $viz_color_col_name viz_color_col_name
     *
     * @return self
     */
    public function setVizColorColName($viz_color_col_name)
    {
        if (is_null($viz_color_col_name)) {
            throw new \InvalidArgumentException('non-nullable viz_color_col_name cannot be null');
        }
        $this->container['viz_color_col_name'] = $viz_color_col_name;

        return $this;
    }

    /**
     * Gets viz_data_aggregation
     *
     * @return string|null
     */
    public function getVizDataAggregation()
    {
        return $this->container['viz_data_aggregation'];
    }

    /**
     * Sets viz_data_aggregation
     *
     * @param string|null $viz_data_aggregation viz_data_aggregation
     *
     * @return self
     */
    public function setVizDataAggregation($viz_data_aggregation)
    {
        if (is_null($viz_data_aggregation)) {
            throw new \InvalidArgumentException('non-nullable viz_data_aggregation cannot be null');
        }
        $this->container['viz_data_aggregation'] = $viz_data_aggregation;

        return $this;
    }

    /**
     * Gets viz_sort_direction
     *
     * @return string|null
     */
    public function getVizSortDirection()
    {
        return $this->container['viz_sort_direction'];
    }

    /**
     * Sets viz_sort_direction
     *
     * @param string|null $viz_sort_direction viz_sort_direction
     *
     * @return self
     */
    public function setVizSortDirection($viz_sort_direction)
    {
        if (is_null($viz_sort_direction)) {
            throw new \InvalidArgumentException('non-nullable viz_sort_direction cannot be null');
        }
        $this->container['viz_sort_direction'] = $viz_sort_direction;

        return $this;
    }

    /**
     * Gets viz_data_limit
     *
     * @return string|null
     */
    public function getVizDataLimit()
    {
        return $this->container['viz_data_limit'];
    }

    /**
     * Sets viz_data_limit
     *
     * @param string|null $viz_data_limit viz_data_limit
     *
     * @return self
     */
    public function setVizDataLimit($viz_data_limit)
    {
        if (is_null($viz_data_limit)) {
            throw new \InvalidArgumentException('non-nullable viz_data_limit cannot be null');
        }
        $this->container['viz_data_limit'] = $viz_data_limit;

        return $this;
    }

    /**
     * Gets viz_color_scheme
     *
     * @return string|null
     */
    public function getVizColorScheme()
    {
        return $this->container['viz_color_scheme'];
    }

    /**
     * Sets viz_color_scheme
     *
     * @param string|null $viz_color_scheme viz_color_scheme
     *
     * @return self
     */
    public function setVizColorScheme($viz_color_scheme)
    {
        if (is_null($viz_color_scheme)) {
            throw new \InvalidArgumentException('non-nullable viz_color_scheme cannot be null');
        }
        $this->container['viz_color_scheme'] = $viz_color_scheme;

        return $this;
    }

    /**
     * Gets allow_params
     *
     * @return string|null
     */
    public function getAllowParams()
    {
        return $this->container['allow_params'];
    }

    /**
     * Sets allow_params
     *
     * @param string|null $allow_params allow_params
     *
     * @return self
     */
    public function setAllowParams($allow_params)
    {
        if (is_null($allow_params)) {
            throw new \InvalidArgumentException('non-nullable allow_params cannot be null');
        }
        $this->container['allow_params'] = $allow_params;

        return $this;
    }

    /**
     * Gets accept_terms
     *
     * @return string|null
     */
    public function getAcceptTerms()
    {
        return $this->container['accept_terms'];
    }

    /**
     * Sets accept_terms
     *
     * @param string|null $accept_terms accept_terms
     *
     * @return self
     */
    public function setAcceptTerms($accept_terms)
    {
        if (is_null($accept_terms)) {
            throw new \InvalidArgumentException('non-nullable accept_terms cannot be null');
        }
        $this->container['accept_terms'] = $accept_terms;

        return $this;
    }

    /**
     * Gets cached
     *
     * @return string|null
     */
    public function getCached()
    {
        return $this->container['cached'];
    }

    /**
     * Sets cached
     *
     * @param string|null $cached cached
     *
     * @return self
     */
    public function setCached($cached)
    {
        if (is_null($cached)) {
            throw new \InvalidArgumentException('non-nullable cached cannot be null');
        }
        $this->container['cached'] = $cached;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets next_run
     *
     * @return string|null
     */
    public function getNextRun()
    {
        return $this->container['next_run'];
    }

    /**
     * Sets next_run
     *
     * @param string|null $next_run next_run
     *
     * @return self
     */
    public function setNextRun($next_run)
    {
        if (is_null($next_run)) {
            throw new \InvalidArgumentException('non-nullable next_run cannot be null');
        }
        $this->container['next_run'] = $next_run;

        return $this;
    }

    /**
     * Gets data_time_period_start
     *
     * @return string|null
     */
    public function getDataTimePeriodStart()
    {
        return $this->container['data_time_period_start'];
    }

    /**
     * Sets data_time_period_start
     *
     * @param string|null $data_time_period_start data_time_period_start
     *
     * @return self
     */
    public function setDataTimePeriodStart($data_time_period_start)
    {
        if (is_null($data_time_period_start)) {
            throw new \InvalidArgumentException('non-nullable data_time_period_start cannot be null');
        }
        $this->container['data_time_period_start'] = $data_time_period_start;

        return $this;
    }

    /**
     * Gets data_time_period_end
     *
     * @return string|null
     */
    public function getDataTimePeriodEnd()
    {
        return $this->container['data_time_period_end'];
    }

    /**
     * Sets data_time_period_end
     *
     * @param string|null $data_time_period_end data_time_period_end
     *
     * @return self
     */
    public function setDataTimePeriodEnd($data_time_period_end)
    {
        if (is_null($data_time_period_end)) {
            throw new \InvalidArgumentException('non-nullable data_time_period_end cannot be null');
        }
        $this->container['data_time_period_end'] = $data_time_period_end;

        return $this;
    }

    /**
     * Gets geographic_coverage_type
     *
     * @return string|null
     */
    public function getGeographicCoverageType()
    {
        return $this->container['geographic_coverage_type'];
    }

    /**
     * Sets geographic_coverage_type
     *
     * @param string|null $geographic_coverage_type geographic_coverage_type
     *
     * @return self
     */
    public function setGeographicCoverageType($geographic_coverage_type)
    {
        if (is_null($geographic_coverage_type)) {
            throw new \InvalidArgumentException('non-nullable geographic_coverage_type cannot be null');
        }
        $this->container['geographic_coverage_type'] = $geographic_coverage_type;

        return $this;
    }

    /**
     * Gets geographic_coverage_details
     *
     * @return string|null
     */
    public function getGeographicCoverageDetails()
    {
        return $this->container['geographic_coverage_details'];
    }

    /**
     * Sets geographic_coverage_details
     *
     * @param string|null $geographic_coverage_details geographic_coverage_details
     *
     * @return self
     */
    public function setGeographicCoverageDetails($geographic_coverage_details)
    {
        if (is_null($geographic_coverage_details)) {
            throw new \InvalidArgumentException('non-nullable geographic_coverage_details cannot be null');
        }
        $this->container['geographic_coverage_details'] = $geographic_coverage_details;

        return $this;
    }

    /**
     * Gets data_source_refresh_frequency
     *
     * @return string|null
     */
    public function getDataSourceRefreshFrequency()
    {
        return $this->container['data_source_refresh_frequency'];
    }

    /**
     * Sets data_source_refresh_frequency
     *
     * @param string|null $data_source_refresh_frequency data_source_refresh_frequency
     *
     * @return self
     */
    public function setDataSourceRefreshFrequency($data_source_refresh_frequency)
    {
        if (is_null($data_source_refresh_frequency)) {
            throw new \InvalidArgumentException('non-nullable data_source_refresh_frequency cannot be null');
        }
        $this->container['data_source_refresh_frequency'] = $data_source_refresh_frequency;

        return $this;
    }

    /**
     * Gets data_source_last_refreshed
     *
     * @return string|null
     */
    public function getDataSourceLastRefreshed()
    {
        return $this->container['data_source_last_refreshed'];
    }

    /**
     * Sets data_source_last_refreshed
     *
     * @param string|null $data_source_last_refreshed data_source_last_refreshed
     *
     * @return self
     */
    public function setDataSourceLastRefreshed($data_source_last_refreshed)
    {
        if (is_null($data_source_last_refreshed)) {
            throw new \InvalidArgumentException('non-nullable data_source_last_refreshed cannot be null');
        }
        $this->container['data_source_last_refreshed'] = $data_source_last_refreshed;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


