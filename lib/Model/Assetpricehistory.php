<?php
/**
 * Assetpricehistory
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Spartera API Documentation
 *
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SparteraApiSdk\Model;

use \ArrayAccess;
use \SparteraApiSdk\ObjectSerializer;

/**
 * Assetpricehistory Class Doc Comment
 *
 * @category Class
 * @description Pricing history for an asset
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Assetpricehistory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Assetpricehistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aph_id' => 'string',
        'asset_id' => 'string',
        'price_usd' => 'float',
        'price_credits' => 'string',
        'discount_percentage' => 'float',
        'sale_start_date' => 'string',
        'sale_end_date' => 'string',
        'date_ended' => 'string',
        'date_created' => 'string',
        'last_updated' => 'string',
        'active' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aph_id' => null,
        'asset_id' => null,
        'price_usd' => 'double',
        'price_credits' => null,
        'discount_percentage' => 'float',
        'sale_start_date' => null,
        'sale_end_date' => null,
        'date_ended' => null,
        'date_created' => null,
        'last_updated' => null,
        'active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aph_id' => false,
        'asset_id' => false,
        'price_usd' => false,
        'price_credits' => false,
        'discount_percentage' => false,
        'sale_start_date' => false,
        'sale_end_date' => false,
        'date_ended' => false,
        'date_created' => false,
        'last_updated' => false,
        'active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aph_id' => 'aph_id',
        'asset_id' => 'asset_id',
        'price_usd' => 'price_usd',
        'price_credits' => 'price_credits',
        'discount_percentage' => 'discount_percentage',
        'sale_start_date' => 'sale_start_date',
        'sale_end_date' => 'sale_end_date',
        'date_ended' => 'date_ended',
        'date_created' => 'date_created',
        'last_updated' => 'last_updated',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aph_id' => 'setAphId',
        'asset_id' => 'setAssetId',
        'price_usd' => 'setPriceUsd',
        'price_credits' => 'setPriceCredits',
        'discount_percentage' => 'setDiscountPercentage',
        'sale_start_date' => 'setSaleStartDate',
        'sale_end_date' => 'setSaleEndDate',
        'date_ended' => 'setDateEnded',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aph_id' => 'getAphId',
        'asset_id' => 'getAssetId',
        'price_usd' => 'getPriceUsd',
        'price_credits' => 'getPriceCredits',
        'discount_percentage' => 'getDiscountPercentage',
        'sale_start_date' => 'getSaleStartDate',
        'sale_end_date' => 'getSaleEndDate',
        'date_ended' => 'getDateEnded',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('aph_id', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('price_usd', $data ?? [], null);
        $this->setIfExists('price_credits', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('sale_start_date', $data ?? [], null);
        $this->setIfExists('sale_end_date', $data ?? [], null);
        $this->setIfExists('date_ended', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset_id'] === null) {
            $invalidProperties[] = "'asset_id' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aph_id
     *
     * @return string|null
     */
    public function getAphId()
    {
        return $this->container['aph_id'];
    }

    /**
     * Sets aph_id
     *
     * @param string|null $aph_id aph_id
     *
     * @return self
     */
    public function setAphId($aph_id)
    {
        if (is_null($aph_id)) {
            throw new \InvalidArgumentException('non-nullable aph_id cannot be null');
        }
        $this->container['aph_id'] = $aph_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id asset_id
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets price_usd
     *
     * @return float|null
     */
    public function getPriceUsd()
    {
        return $this->container['price_usd'];
    }

    /**
     * Sets price_usd
     *
     * @param float|null $price_usd price_usd
     *
     * @return self
     */
    public function setPriceUsd($price_usd)
    {
        if (is_null($price_usd)) {
            throw new \InvalidArgumentException('non-nullable price_usd cannot be null');
        }
        $this->container['price_usd'] = $price_usd;

        return $this;
    }

    /**
     * Gets price_credits
     *
     * @return string|null
     */
    public function getPriceCredits()
    {
        return $this->container['price_credits'];
    }

    /**
     * Sets price_credits
     *
     * @param string|null $price_credits price_credits
     *
     * @return self
     */
    public function setPriceCredits($price_credits)
    {
        if (is_null($price_credits)) {
            throw new \InvalidArgumentException('non-nullable price_credits cannot be null');
        }
        $this->container['price_credits'] = $price_credits;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            throw new \InvalidArgumentException('non-nullable discount_percentage cannot be null');
        }
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets sale_start_date
     *
     * @return string|null
     */
    public function getSaleStartDate()
    {
        return $this->container['sale_start_date'];
    }

    /**
     * Sets sale_start_date
     *
     * @param string|null $sale_start_date sale_start_date
     *
     * @return self
     */
    public function setSaleStartDate($sale_start_date)
    {
        if (is_null($sale_start_date)) {
            throw new \InvalidArgumentException('non-nullable sale_start_date cannot be null');
        }
        $this->container['sale_start_date'] = $sale_start_date;

        return $this;
    }

    /**
     * Gets sale_end_date
     *
     * @return string|null
     */
    public function getSaleEndDate()
    {
        return $this->container['sale_end_date'];
    }

    /**
     * Sets sale_end_date
     *
     * @param string|null $sale_end_date sale_end_date
     *
     * @return self
     */
    public function setSaleEndDate($sale_end_date)
    {
        if (is_null($sale_end_date)) {
            throw new \InvalidArgumentException('non-nullable sale_end_date cannot be null');
        }
        $this->container['sale_end_date'] = $sale_end_date;

        return $this;
    }

    /**
     * Gets date_ended
     *
     * @return string|null
     */
    public function getDateEnded()
    {
        return $this->container['date_ended'];
    }

    /**
     * Sets date_ended
     *
     * @param string|null $date_ended date_ended
     *
     * @return self
     */
    public function setDateEnded($date_ended)
    {
        if (is_null($date_ended)) {
            throw new \InvalidArgumentException('non-nullable date_ended cannot be null');
        }
        $this->container['date_ended'] = $date_ended;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


