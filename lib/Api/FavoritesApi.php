<?php
/**
 * FavoritesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Spartera API Documentation
 *
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SparteraApiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use SparteraApiSdk\ApiException;
use SparteraApiSdk\Configuration;
use SparteraApiSdk\FormDataProcessor;
use SparteraApiSdk\HeaderSelector;
use SparteraApiSdk\ObjectSerializer;

/**
 * FavoritesApi Class Doc Comment
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FavoritesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesGet' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesPost' => [
            'application/json',
        ],
        'companiesCompanyIdUsersUserIdFavoritesUncategorizedGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet
     *
     * Get all favorites for the specified user in a specific category
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $category category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet($company_id, $user_id, $category, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetWithHttpInfo($company_id, $user_id, $category, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetWithHttpInfo
     *
     * Get all favorites for the specified user in a specific category
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetWithHttpInfo($company_id, $user_id, $category, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetRequest($company_id, $user_id, $category, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetAsync
     *
     * Get all favorites for the specified user in a specific category
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetAsync($company_id, $user_id, $category, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetAsyncWithHttpInfo($company_id, $user_id, $category, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetAsyncWithHttpInfo
     *
     * Get all favorites for the specified user in a specific category
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetAsyncWithHttpInfo($company_id, $user_id, $category, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetRequest($company_id, $user_id, $category, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetRequest($company_id, $user_id, $category, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'
            );
        }

        // verify the required parameter 'category' is set
        if ($category === null || (is_array($category) && count($category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category when calling companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites/category/{category}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($category !== null) {
            $resourcePath = str_replace(
                '{' . 'category' . '}',
                ObjectSerializer::toPathValue($category),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet
     *
     * Check if the specified user has favorited a specific asset
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet($company_id, $user_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetWithHttpInfo($company_id, $user_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetWithHttpInfo
     *
     * Check if the specified user has favorited a specific asset
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetWithHttpInfo($company_id, $user_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetRequest($company_id, $user_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetAsync
     *
     * Check if the specified user has favorited a specific asset
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetAsync($company_id, $user_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetAsyncWithHttpInfo($company_id, $user_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetAsyncWithHttpInfo
     *
     * Check if the specified user has favorited a specific asset
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetAsyncWithHttpInfo($company_id, $user_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetRequest($company_id, $user_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetRequest($company_id, $user_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites/check/{asset_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete
     *
     * Delete single favorite by ID (unfavorite an asset)
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $favorite_id favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteWithHttpInfo($company_id, $user_id, $favorite_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteWithHttpInfo
     *
     * Delete single favorite by ID (unfavorite an asset)
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteWithHttpInfo($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteRequest($company_id, $user_id, $favorite_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteAsync
     *
     * Delete single favorite by ID (unfavorite an asset)
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteAsync($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteAsyncWithHttpInfo($company_id, $user_id, $favorite_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteAsyncWithHttpInfo
     *
     * Delete single favorite by ID (unfavorite an asset)
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteAsyncWithHttpInfo($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteRequest($company_id, $user_id, $favorite_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteRequest($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'
            );
        }

        // verify the required parameter 'favorite_id' is set
        if ($favorite_id === null || (is_array($favorite_id) && count($favorite_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $favorite_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites/{favorite_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($favorite_id !== null) {
            $resourcePath = str_replace(
                '{' . 'favorite_id' . '}',
                ObjectSerializer::toPathValue($favorite_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet
     *
     * Get single favorite by ID
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $favorite_id favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetWithHttpInfo($company_id, $user_id, $favorite_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetWithHttpInfo
     *
     * Get single favorite by ID
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetWithHttpInfo($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetRequest($company_id, $user_id, $favorite_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetAsync
     *
     * Get single favorite by ID
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetAsync($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetAsyncWithHttpInfo($company_id, $user_id, $favorite_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetAsyncWithHttpInfo
     *
     * Get single favorite by ID
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetAsyncWithHttpInfo($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetRequest($company_id, $user_id, $favorite_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetRequest($company_id, $user_id, $favorite_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'
            );
        }

        // verify the required parameter 'favorite_id' is set
        if ($favorite_id === null || (is_array($favorite_id) && count($favorite_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $favorite_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites/{favorite_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($favorite_id !== null) {
            $resourcePath = str_replace(
                '{' . 'favorite_id' . '}',
                ObjectSerializer::toPathValue($favorite_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch
     *
     * Update an existing favorite by ID
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $favorite_id favorite_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch($company_id, $user_id, $favorite_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchWithHttpInfo($company_id, $user_id, $favorite_id, $favorite, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchWithHttpInfo
     *
     * Update an existing favorite by ID
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchWithHttpInfo($company_id, $user_id, $favorite_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchRequest($company_id, $user_id, $favorite_id, $favorite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchAsync
     *
     * Update an existing favorite by ID
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchAsync($company_id, $user_id, $favorite_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchAsyncWithHttpInfo($company_id, $user_id, $favorite_id, $favorite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchAsyncWithHttpInfo
     *
     * Update an existing favorite by ID
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchAsyncWithHttpInfo($company_id, $user_id, $favorite_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchRequest($company_id, $user_id, $favorite_id, $favorite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $favorite_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchRequest($company_id, $user_id, $favorite_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'
            );
        }

        // verify the required parameter 'favorite_id' is set
        if ($favorite_id === null || (is_array($favorite_id) && count($favorite_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $favorite_id when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'
            );
        }

        // verify the required parameter 'favorite' is set
        if ($favorite === null || (is_array($favorite) && count($favorite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $favorite when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites/{favorite_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($favorite_id !== null) {
            $resourcePath = str_replace(
                '{' . 'favorite_id' . '}',
                ObjectSerializer::toPathValue($favorite_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($favorite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($favorite));
            } else {
                $httpBody = $favorite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesGet
     *
     * Get a list of all favorites for a specific user
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesGet($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesGetWithHttpInfo($company_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesGetWithHttpInfo
     *
     * Get a list of all favorites for a specific user
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesGetWithHttpInfo($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesGetRequest($company_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesGetAsync
     *
     * Get a list of all favorites for a specific user
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesGetAsync($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesGetAsyncWithHttpInfo($company_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesGetAsyncWithHttpInfo
     *
     * Get a list of all favorites for a specific user
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesGetAsyncWithHttpInfo($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesGetRequest($company_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesGet'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesGetRequest($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesGet'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesPost
     *
     * POST /companies/{company_id}/users/{user_id}/favorites
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject
     */
    public function companiesCompanyIdUsersUserIdFavoritesPost($company_id, $user_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesPostWithHttpInfo($company_id, $user_id, $favorite, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesPostWithHttpInfo
     *
     * POST /companies/{company_id}/users/{user_id}/favorites
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesPostWithHttpInfo($company_id, $user_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesPostRequest($company_id, $user_id, $favorite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesPostAsync
     *
     * POST /companies/{company_id}/users/{user_id}/favorites
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesPostAsync($company_id, $user_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesPostAsyncWithHttpInfo($company_id, $user_id, $favorite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesPostAsyncWithHttpInfo
     *
     * POST /companies/{company_id}/users/{user_id}/favorites
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesPostAsyncWithHttpInfo($company_id, $user_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesPostRequest($company_id, $user_id, $favorite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesPost'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  \SparteraApiSdk\Model\Favorite $favorite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesPostRequest($company_id, $user_id, $favorite, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesPost'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesPost'
            );
        }

        // verify the required parameter 'favorite' is set
        if ($favorite === null || (is_array($favorite) && count($favorite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $favorite when calling companiesCompanyIdUsersUserIdFavoritesPost'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($favorite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($favorite));
            } else {
                $httpBody = $favorite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesUncategorizedGet
     *
     * Get all favorites for the specified user that don&#39;t have a category
     *
     * @param  string $company_id company_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdUsersUserIdFavoritesUncategorizedGet($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'][0])
    {
        list($response) = $this->companiesCompanyIdUsersUserIdFavoritesUncategorizedGetWithHttpInfo($company_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesUncategorizedGetWithHttpInfo
     *
     * Get all favorites for the specified user that don&#39;t have a category
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdUsersUserIdFavoritesUncategorizedGetWithHttpInfo($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'][0])
    {
        $request = $this->companiesCompanyIdUsersUserIdFavoritesUncategorizedGetRequest($company_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesUncategorizedGetAsync
     *
     * Get all favorites for the specified user that don&#39;t have a category
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesUncategorizedGetAsync($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'][0])
    {
        return $this->companiesCompanyIdUsersUserIdFavoritesUncategorizedGetAsyncWithHttpInfo($company_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdUsersUserIdFavoritesUncategorizedGetAsyncWithHttpInfo
     *
     * Get all favorites for the specified user that don&#39;t have a category
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdUsersUserIdFavoritesUncategorizedGetAsyncWithHttpInfo($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'][0])
    {
        $returnType = 'object';
        $request = $this->companiesCompanyIdUsersUserIdFavoritesUncategorizedGetRequest($company_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'
     *
     * @param  string $company_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdUsersUserIdFavoritesUncategorizedGetRequest($company_id, $user_id, string $contentType = self::contentTypes['companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling companiesCompanyIdUsersUserIdFavoritesUncategorizedGet'
            );
        }


        $resourcePath = '/companies/{company_id}/users/{user_id}/favorites/uncategorized';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
