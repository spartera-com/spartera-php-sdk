<?php
/**
 * AssetsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Spartera API Documentation
 *
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SparteraApiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use SparteraApiSdk\ApiException;
use SparteraApiSdk\Configuration;
use SparteraApiSdk\FormDataProcessor;
use SparteraApiSdk\HeaderSelector;
use SparteraApiSdk\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  SparteraApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'analyzeCompanyHandleAssetsAssetSlugGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdDelete' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdInfoschemaGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdInfoschemaSaveGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdPatch' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdPredictedPriceGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdStatisticsGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsAssetIdTestGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsGet' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsPost' => [
            'application/json',
        ],
        'companiesCompanyIdAssetsStatisticsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation analyzeCompanyHandleAssetsAssetSlugGet
     *
     * Process (analyze) an asset. Attempt to process an analytic on a backend warehouse/AI model.
     *
     * @param  string $company_handle company_handle (required)
     * @param  string $asset_slug asset_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function analyzeCompanyHandleAssetsAssetSlugGet($company_handle, $asset_slug, string $contentType = self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'][0])
    {
        list($response) = $this->analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo($company_handle, $asset_slug, $contentType);
        return $response;
    }

    /**
     * Operation analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo
     *
     * Process (analyze) an asset. Attempt to process an analytic on a backend warehouse/AI model.
     *
     * @param  string $company_handle (required)
     * @param  string $asset_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo($company_handle, $asset_slug, string $contentType = self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'][0])
    {
        $request = $this->analyzeCompanyHandleAssetsAssetSlugGetRequest($company_handle, $asset_slug, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation analyzeCompanyHandleAssetsAssetSlugGetAsync
     *
     * Process (analyze) an asset. Attempt to process an analytic on a backend warehouse/AI model.
     *
     * @param  string $company_handle (required)
     * @param  string $asset_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function analyzeCompanyHandleAssetsAssetSlugGetAsync($company_handle, $asset_slug, string $contentType = self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'][0])
    {
        return $this->analyzeCompanyHandleAssetsAssetSlugGetAsyncWithHttpInfo($company_handle, $asset_slug, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation analyzeCompanyHandleAssetsAssetSlugGetAsyncWithHttpInfo
     *
     * Process (analyze) an asset. Attempt to process an analytic on a backend warehouse/AI model.
     *
     * @param  string $company_handle (required)
     * @param  string $asset_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function analyzeCompanyHandleAssetsAssetSlugGetAsyncWithHttpInfo($company_handle, $asset_slug, string $contentType = self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response';
        $request = $this->analyzeCompanyHandleAssetsAssetSlugGetRequest($company_handle, $asset_slug, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'analyzeCompanyHandleAssetsAssetSlugGet'
     *
     * @param  string $company_handle (required)
     * @param  string $asset_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function analyzeCompanyHandleAssetsAssetSlugGetRequest($company_handle, $asset_slug, string $contentType = self::contentTypes['analyzeCompanyHandleAssetsAssetSlugGet'][0])
    {

        // verify the required parameter 'company_handle' is set
        if ($company_handle === null || (is_array($company_handle) && count($company_handle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_handle when calling analyzeCompanyHandleAssetsAssetSlugGet'
            );
        }

        // verify the required parameter 'asset_slug' is set
        if ($asset_slug === null || (is_array($asset_slug) && count($asset_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_slug when calling analyzeCompanyHandleAssetsAssetSlugGet'
            );
        }


        $resourcePath = '/analyze/{company_handle}/assets/{asset_slug}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_handle !== null) {
            $resourcePath = str_replace(
                '{' . 'company_handle' . '}',
                ObjectSerializer::toPathValue($company_handle),
                $resourcePath
            );
        }
        // path params
        if ($asset_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_slug' . '}',
                ObjectSerializer::toPathValue($asset_slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdDelete
     *
     * Delete single asset by ID
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdDelete200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdDelete($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo
     *
     * Delete single asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdDelete200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdDeleteRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdDelete200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdDelete200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdDeleteAsync
     *
     * Delete single asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdDeleteAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdDeleteAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdDeleteAsyncWithHttpInfo
     *
     * Delete single asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdDeleteAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdDelete200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdDeleteRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdDelete'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdDeleteRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdDelete'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdDelete'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdDelete'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdGet
     *
     * Get single asset by ID
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdGet($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdGetWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdGetWithHttpInfo
     *
     * Get single asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdGetWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdGetRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdGetAsync
     *
     * Get single asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdGetAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdGet'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdGetAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdGetAsyncWithHttpInfo
     *
     * Get single asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdGetAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdGet200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdGetRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdGetRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaGet
     *
     * Get the information schema for a specific asset&#39;s table
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaGet($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo
     *
     * Get the information schema for a specific asset&#39;s table
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdInfoschemaGetRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaGetAsync
     *
     * Get the information schema for a specific asset&#39;s table
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaGetAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdInfoschemaGetAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaGetAsyncWithHttpInfo
     *
     * Get the information schema for a specific asset&#39;s table
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaGetAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdInfoschemaGetRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdInfoschemaGet'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaGetRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdInfoschemaGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdInfoschemaGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}/infoschema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaSaveGet
     *
     * Retrieve and save an asset&#39;s information schema
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaSaveGet($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo
     *
     * Retrieve and save an asset&#39;s information schema
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdInfoschemaSaveGetRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaSaveGetAsync
     *
     * Retrieve and save an asset&#39;s information schema
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaSaveGetAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdInfoschemaSaveGetAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdInfoschemaSaveGetAsyncWithHttpInfo
     *
     * Retrieve and save an asset&#39;s information schema
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaSaveGetAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdInfoschemaSaveGetRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdInfoschemaSaveGetRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdInfoschemaSaveGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}/infoschema/save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPatch
     *
     * Update an existing asset by ID
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdPatch200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdPatch($company_id, $asset_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdPatchWithHttpInfo($company_id, $asset_id, $asset, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPatchWithHttpInfo
     *
     * Update an existing asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdPatch200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdPatchWithHttpInfo($company_id, $asset_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdPatchRequest($company_id, $asset_id, $asset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdPatch200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPatchAsync
     *
     * Update an existing asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdPatchAsync($company_id, $asset_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdPatchAsyncWithHttpInfo($company_id, $asset_id, $asset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPatchAsyncWithHttpInfo
     *
     * Update an existing asset by ID
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdPatchAsyncWithHttpInfo($company_id, $asset_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsAssetIdPatch200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdPatchRequest($company_id, $asset_id, $asset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdPatch'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdPatchRequest($company_id, $asset_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPatch'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdPatch'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdPatch'
            );
        }

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling companiesCompanyIdAssetsAssetIdPatch'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($asset)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($asset));
            } else {
                $httpBody = $asset;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPredictedPriceGet
     *
     * Get AI-predicted pricing for a specific asset
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdPredictedPriceGet($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo
     *
     * Get AI-predicted pricing for a specific asset
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdPredictedPriceGetRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPredictedPriceGetAsync
     *
     * Get AI-predicted pricing for a specific asset
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdPredictedPriceGetAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdPredictedPriceGetAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdPredictedPriceGetAsyncWithHttpInfo
     *
     * Get AI-predicted pricing for a specific asset
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdPredictedPriceGetAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdPredictedPriceGetRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdPredictedPriceGet'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdPredictedPriceGetRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdPredictedPriceGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdPredictedPriceGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdPredictedPriceGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}/predicted_price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdStatisticsGet
     *
     * Get statistics for a specific asset (public endpoint)
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdStatisticsGet($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo
     *
     * Get statistics for a specific asset (public endpoint)
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdStatisticsGetRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdStatisticsGetAsync
     *
     * Get statistics for a specific asset (public endpoint)
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdStatisticsGetAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdStatisticsGetAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdStatisticsGetAsyncWithHttpInfo
     *
     * Get statistics for a specific asset (public endpoint)
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdStatisticsGetAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdStatisticsGetRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdStatisticsGet'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdStatisticsGetRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdStatisticsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdStatisticsGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdStatisticsGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}/statistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdTestGet
     *
     * Test out an Asset (on a subset of data)
     *
     * @param  string $company_id company_id (required)
     * @param  string $asset_id asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsAssetIdTestGet($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo($company_id, $asset_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo
     *
     * Test out an Asset (on a subset of data)
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsAssetIdTestGetRequest($company_id, $asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdTestGetAsync
     *
     * Test out an Asset (on a subset of data)
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdTestGetAsync($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'][0])
    {
        return $this->companiesCompanyIdAssetsAssetIdTestGetAsyncWithHttpInfo($company_id, $asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsAssetIdTestGetAsyncWithHttpInfo
     *
     * Test out an Asset (on a subset of data)
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsAssetIdTestGetAsyncWithHttpInfo($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsAssetIdTestGetRequest($company_id, $asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsAssetIdTestGet'
     *
     * @param  string $company_id (required)
     * @param  string $asset_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsAssetIdTestGetRequest($company_id, $asset_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsAssetIdTestGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsAssetIdTestGet'
            );
        }

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling companiesCompanyIdAssetsAssetIdTestGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/{asset_id}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsGet
     *
     * Get all assets for a specific company
     *
     * @param  string $company_id company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsGet($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsGetWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsGetWithHttpInfo
     *
     * Get all assets for a specific company
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsGetWithHttpInfo($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsGetRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsGetAsync
     *
     * Get all assets for a specific company
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsGetAsync($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsGet'][0])
    {
        return $this->companiesCompanyIdAssetsGetAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsGetAsyncWithHttpInfo
     *
     * Get all assets for a specific company
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsGetAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsGetRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsGet'
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsGetRequest($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsPost
     *
     * Create a new asset
     *
     * @param  string $company_id company_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsPost'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsPost200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject
     */
    public function companiesCompanyIdAssetsPost($company_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsPost'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsPostWithHttpInfo($company_id, $asset, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsPostWithHttpInfo
     *
     * Create a new asset
     *
     * @param  string $company_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsPost'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsPost200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsPostWithHttpInfo($company_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsPost'][0])
    {
        $request = $this->companiesCompanyIdAssetsPostRequest($company_id, $asset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsPost200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsPostAsync
     *
     * Create a new asset
     *
     * @param  string $company_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsPostAsync($company_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsPost'][0])
    {
        return $this->companiesCompanyIdAssetsPostAsyncWithHttpInfo($company_id, $asset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsPostAsyncWithHttpInfo
     *
     * Create a new asset
     *
     * @param  string $company_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsPostAsyncWithHttpInfo($company_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsPost'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsPost200Response';
        $request = $this->companiesCompanyIdAssetsPostRequest($company_id, $asset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsPost'
     *
     * @param  string $company_id (required)
     * @param  \SparteraApiSdk\Model\Asset $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsPostRequest($company_id, $asset, string $contentType = self::contentTypes['companiesCompanyIdAssetsPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsPost'
            );
        }

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling companiesCompanyIdAssetsPost'
            );
        }


        $resourcePath = '/companies/{company_id}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($asset)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($asset));
            } else {
                $httpBody = $asset;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdAssetsStatisticsGet
     *
     * Get statistics for all assets the user has access to
     *
     * @param  string $company_id company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsStatisticsGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3
     */
    public function companiesCompanyIdAssetsStatisticsGet($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsStatisticsGet'][0])
    {
        list($response) = $this->companiesCompanyIdAssetsStatisticsGetWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdAssetsStatisticsGetWithHttpInfo
     *
     * Get statistics for all assets the user has access to
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsStatisticsGet'] to see the possible values for this operation
     *
     * @throws \SparteraApiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response|\SparteraApiSdk\Model\InlineObject1|\SparteraApiSdk\Model\InlineObject2|\SparteraApiSdk\Model\InlineObject3, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdAssetsStatisticsGetWithHttpInfo($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsStatisticsGet'][0])
    {
        $request = $this->companiesCompanyIdAssetsStatisticsGetRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject2',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\SparteraApiSdk\Model\InlineObject3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SparteraApiSdk\Model\InlineObject3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdAssetsStatisticsGetAsync
     *
     * Get statistics for all assets the user has access to
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsStatisticsGetAsync($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsStatisticsGet'][0])
    {
        return $this->companiesCompanyIdAssetsStatisticsGetAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdAssetsStatisticsGetAsyncWithHttpInfo
     *
     * Get statistics for all assets the user has access to
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdAssetsStatisticsGetAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsStatisticsGet'][0])
    {
        $returnType = '\SparteraApiSdk\Model\CompaniesCompanyIdAssetsGet200Response';
        $request = $this->companiesCompanyIdAssetsStatisticsGetRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdAssetsStatisticsGet'
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdAssetsStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdAssetsStatisticsGetRequest($company_id, string $contentType = self::contentTypes['companiesCompanyIdAssetsStatisticsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdAssetsStatisticsGet'
            );
        }


        $resourcePath = '/companies/{company_id}/assets/statistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
